# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mYLUMZDthU9z2u4QWGF9YepfFVi3oSyv
"""

"""Mount Google Drive"""

from google.colab import drive
drive.mount('/content/drive')


import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
import seaborn as sns

file_path = '/content/drive/MyDrive/dataset/imdb_kaggle.csv'
data = pd.read_csv(file_path)

print(data.head())
print(data.isnull().sum())

for column in data.columns:
    if data[column].dtype in ['float64', 'int64']:
        data[column] = data[column].fillna(data[column].median())
    else:
        data[column] = data[column].fillna("Unknown")





# Convert 'duration' from "2h 22m" to minutes
def convert_duration(duration_str):
    if isinstance(duration_str, str):
        hours = re.search(r'(\d+)h', duration_str)
        minutes = re.search(r'(\d+)m', duration_str)
        total_minutes = 0
        if hours:
            total_minutes += int(hours.group(1)) * 60
        if minutes:
            total_minutes += int(minutes.group(1))
        return total_minutes
    return np.nan

data["duration_minutes"] = data["duration"].apply(convert_duration)


# Clean 'numberof_ratings'
def convert_ratings(rating_str):
    if isinstance(rating_str, str):
        rating_str = rating_str.strip("()")
        if 'M' in rating_str:
            return float(rating_str.replace('M', '')) * 1_000_000
        elif 'K' in rating_str:
            return float(rating_str.replace('K', '')) * 1_000
        else:
            return float(rating_str)
    return np.nan

data["numberof_ratings"] = data["numberof_ratings"].apply(convert_ratings)


print(data.dtypes)


# --- ANALYSIS & VISUALIZATION ---

# number of movie pre year
movie_per_year = data['year'].value_counts().sort_index()

# top 10 movie with higest rating

top_10_movie = data.sort_values(by='rating', ascending=False).head(10)

# avg rating per year

avg_rating_per_year = data.groupby("year")["rating"].mean()


sns.set(style="whitegrid")

# Plot all 3 visualizations
fig, axs = plt.subplots(3, 1, figsize=(30, 25))

# Bar chart: Number of movies per year
sns.barplot(x=movie_per_year.index, y=movie_per_year.values, ax=axs[0], color="skyblue")
axs[0].set_title("Number of Movies per Year")
axs[0].set_xlabel("Year")
axs[0].set_ylabel("Count")
axs[0].tick_params(axis='x', rotation=45)


# Line graph: Average rating over years
sns.lineplot(x=avg_rating_per_year.index, y=avg_rating_per_year.values, ax=axs[1], marker='o')
axs[1].set_title("Average IMDb Rating Over the Years")
axs[1].set_xlabel("Year")
axs[1].set_ylabel("Average Rating")


# Scatter plot: Duration vs Rating
sns.scatterplot(data=data, x="duration_minutes", y="rating", hue="year", palette="viridis", ax=axs[2], alpha=0.7)
axs[2].set_title("Duration vs IMDb Rating")
axs[2].set_xlabel("Duration (minutes)")
axs[2].set_ylabel("Rating")



# --- BAR CHART: Top 10 Movies by Rating ---
plt.figure(figsize=(12, 6))
sns.barplot(data=top_10_movie, x="rating", y="name", palette="magma")
plt.title("Top 10 Movies by IMDb Rating")
plt.xlabel("Rating")
plt.ylabel("Movie Name")
plt.tight_layout()
plt.show()

# Optional: Print the top 10 as a table
print(top_10_movie[["name", "year", "rating", "duration_minutes"]])

"""# New section"""